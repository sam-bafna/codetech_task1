/*This project implements a linear regression model to predict housing prices using the Ames Housing dataset, 
with key features like square footage, number of bedrooms, and neighborhood location. 
It includes data preprocessing, model training, and evaluation, along with visualizations like a correlation heatmap and a scatter plot of actual vs. predicted prices.*/


import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.datasets import fetch_openml
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler

# Load the Ames Housing dataset
housing = fetch_openml(name="house_prices", as_frame=True)
df = housing.frame

# Selecting relevant features: GrLivArea (square footage), BedroomAbvGr (number of bedrooms), Neighborhood (location)
X = df[['GrLivArea', 'BedroomAbvGr', 'Neighborhood']]
y = df['SalePrice']

# Generate a correlation heatmap for the selected features and target variable
plt.figure(figsize=(10, 8))
corr_matrix = df[['GrLivArea', 'BedroomAbvGr', 'SalePrice']].corr()
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Heatmap')
plt.show()

# Convert categorical 'Neighborhood' into numerical using one-hot encoding
X = pd.get_dummies(X, columns=['Neighborhood'], drop_first=True)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the numerical features (GrLivArea and BedroomAbvGr)
scaler = StandardScaler()
X_train[['GrLivArea', 'BedroomAbvGr']] = scaler.fit_transform(X_train[['GrLivArea', 'BedroomAbvGr']])
X_test[['GrLivArea', 'BedroomAbvGr']] = scaler.transform(X_test[['GrLivArea', 'BedroomAbvGr']])

# Train the Linear Regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse:.2f}")
print(f"RÂ² Score: {r2:.2f}")

# Plotting the regression line and the actual vs. predicted prices
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, alpha=0.5)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='red')
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual vs Predicted Prices')
plt.show()

# Example of predicting with new data
# Assume: GrLivArea=2000, BedroomAbvGr=3, Neighborhood='OldTown'
new_data = pd.DataFrame([[2000, 3, 'OldTown']], columns=['GrLivArea', 'BedroomAbvGr', 'Neighborhood'])
new_data = pd.get_dummies(new_data, columns=['Neighborhood'])
new_data = new_data.reindex(columns=X_train.columns, fill_value=0)
new_data[['GrLivArea', 'BedroomAbvGr']] = scaler.transform(new_data[['GrLivArea', 'BedroomAbvGr']])

# Predict the price
predicted_price = model.predict(new_data)
print(f"Predicted price for a 2000 sq ft house with 3 bedrooms in 'OldTown': ${predicted_price[0]:.2f}")
